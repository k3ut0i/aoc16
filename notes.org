* Notes for Mercury Practice in Advent of Code 2016

** Day1
- I am having a problem dealing with _semidet_ predicates in _main_ which is supposed to be _det_.
- src_prolog{X mod 4} is supposed to be always 0, 1, 2, or 3. So by destructuring on it I should be able to make a deterministic predicate. But I am not able to do so. How should I deal with this? I do not actually need _mod_ function, but it is a convenient way to express a circular movement. If I rolled my own function then I could have made it deterministic. 
#+begin_src sh :exports results :results value verbatim
  cd /home/keutoi/projects/aoc16/src/
  ./test_day1
#+end_src

#+RESULTS:
: End point is: 91 135
: First repeat point is: 75 - -4

** Day2
   #+begin_src sh :exports results :results value verbatim
     cd /home/keutoi/projects/aoc16/src/
     ./test_day2
   #+end_src

   #+RESULTS:
   : Part1 Pass: [5, 6, 8, 5, 5]
   : Part2 Co-ordinates: [0 - 1, 0 - -1, 1 - 1, -1 - -1, 0 - 0]

** Day3
I quite misunderstood part2 of the problem. I thought that all possible triangles possible from the set of lengths in each column need to be calculated. So I tried to filter through ~10^9 possibilities in each column. That was time consuming and it had become hard to reduce it. So after reading the problem statement twice, I realized that he providing triangle lengths as a sequences. Not as a  set. The solution was straight forward after that.
#+begin_src sh :exports results :results value verbatim
  cd /home/keutoi/projects/aoc16/src/
  ./test_day3
#+end_src

#+RESULTS:
: Triangles possible: 917
: Triangles in each column: 556 540 553, Total: 1649.

** Day4
   #+begin_src sh :exports results :results value verbatim
     cd /home/keutoi/projects/aoc16/src/
     ./test_day4
   #+end_src

   #+RESULTS:
   : 185371
   : entry(["northpole", "object", "storage"], 984, "sixve")
Got stuck at a comparison function. There was a type ambiguity error which I could not decipher. 

** Day5
Skipped MD5. I don't know if the question assumes some existing MD5 infrastructure in the language of you choice. Do I actually need to implement some of it?

** Day6
Getting more familiar with higher order functions. I used a few to define comparison functions for pairs in [[file:src/assoc_utils.m][src/assoc_list.m]] to work with sorting and min-maxing association lists.

#+begin_src sh :exports results :results value verbatim
  cd /home/keutoi/projects/aoc16/src/
  ./test_day6
#+end_src

#+RESULTS:
: Part1: 'tzstqsua', Part2: 'myregdnr'

** Day7
I have used non-determinate predicates and non-trivial backtracking for the first time in mercury. ~tls_ip~ predicate uses it find a matching pattern in from two different list of strings. It feels wonderful to have a tool just right for the job.

#+begin_src sh :exports results :results value verbatim
  cd /home/keutoi/projects/aoc16/src/
  ./test_day7
#+end_src

#+RESULTS:
: TLS IP: 110, SSL IP: 242

** Day8
When trying to represent an array keep the index order and the axis of your model fixed from the start. My code is quite chaotic due to this confusion.
#+begin_src sh :exports results :results value verbatim
  cd /home/keutoi/projects/aoc16/src/
  ./test_day8
#+end_src

#+RESULTS:
: Number of lit pixels: 128
: ####..##...##..###...##..###..#..#.#...#.##...##..
: #....#..#.#..#.#..#.#..#.#..#.#..#.#...##..#.#..#.
: ###..#..#.#..#.#..#.#....#..#.####..#.#.#..#.#..#.
: #....#..#.####.###..#.##.###..#..#...#..####.#..#.
: #....#..#.#..#.#.#..#..#.#....#..#...#..#..#.#..#.
: ####..##..#..#.#..#..###.#....#..#...#..#..#..##..
